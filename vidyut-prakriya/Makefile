# Main commands
# ~~~~~~~~~~~~~

# Generates all tinantas supported by the program and writes them to stdout.
create_tinantas:
	cargo run --release --bin create_tinantas


# Generates all krdantas-prAtipadikas supported by the program and writes them to stdout.
create_krdantas:
	cargo run --release --bin create_krdantas


# Unit tests
# ~~~~~~~~~~

# Runs all unit tests in the crate.
unit_tests:
	cargo test --lib

# Generates a simple coverage report and writes it to disk as an HTML file.
coverage:
	cargo llvm-cov --html


# Integration tests
# ~~~~~~~~~~~~~~~~~

# Generates all tinantas supported by the program and writes them to disk.
create_test_files:
	cargo build --release
	../target/release/create_tinantas --prayoga kartari > test-files/tinantas-basic-kartari.csv
	../target/release/create_tinantas --sanadi Ric --prayoga kartari > test-files/tinantas-nic-kartari.csv
	../target/release/create_tinantas --sanadi san --prayoga kartari > test-files/tinantas-san-kartari.csv
	../target/release/create_tinantas --sanadi yaN --prayoga kartari > test-files/tinantas-yan-kartari.csv
	../target/release/create_tinantas --prayoga karmani > test-files/tinantas-basic-karmani.csv
	../target/release/create_krdantas --krt ktvA > test-files/krdantas-ktvA.csv
	../target/release/create_krdantas --krt kta > test-files/krdantas-kta.csv

create_subantas:
	# Work-in-progress tests for subantas.
	cargo run --bin create_subantas > test-files/subantas.csv

# Runs a full evaluation over all forms generated by vidyut-prakriya. `hash` is
# the SHA-256 hash of the test file. We use `hash` to verify test file
# integrity and ensure that our test cases are stable.
#
# NOTE: test files might contain invalid forms. Our goal with this test is
# simply to confirm that the system hasn't changed in unexpected ways.
test_all: test_tinantas test_krdantas

test_tinantas:
	cargo build --release
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-basic-kartari.csv \
	    --hash "72f94a7fa706cb5b2c96b0f74baa17f1a0c263d96cb92edc669f244dfabafcb2"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-nic-kartari.csv \
	    --hash "c16ff79b6041e25a3297a614611515537020712341febb340e30ace459a8104b"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-san-kartari.csv \
	    --hash "ba174c9268b8be00262dd1f856161b2cb505b515c4e232feb70cb711eb6ce652"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-yan-kartari.csv \
	    --hash "1645ee474a8e370b6cd1a5d487092f2cc84864afd706e2a1ddabea6a8e4c49e3"
	../target/release/test_tinantas \
		--test-cases test-files/tinantas-basic-karmani.csv \
	    --hash "a2bbcd572c04973eee057d58a0caf93ea84fb8eb18845633ce4ef271a0abdffd"

test_krdantas:
	cargo build --release
	../target/release/test_krdantas \
		--test-cases test-files/krdantas-ktvA.csv \
	    --hash "8b7e855313d13de73b34c55e1c41daad262575365d2a5748c2469de09a3df15a"
	../target/release/test_krdantas \
		--test-cases test-files/krdantas-kta.csv \
	    --hash "b13cefedbb913354a12b47ff6ae4187c335e2ebe73066b601ac7eeb32c10ea2a"

test_subantas:
	cargo run --bin test_subantas -- \
		--test-cases test-files/subantas.csv


# Performance
# ~~~~~~~~~~~

# Profiles the program's execution time on OSX. This command will probably not
# work on other operating systems.
profile-time-osx:
	cargo instruments -t time --release --bin create_test_files


# Other
# ~~~~~

# Generates project docs and opens them in your default browser.
docs:
	cargo doc --no-deps --open


# Web builds
# ----------

# Builds WASM module and JS wrapper (pkg/vidyut_prakriya.js).
#
# This is a release build. Creating it will be slower but smaller and (perhaps)
# more performant.
wasm_release:
	wasm-pack build --target web --release

# Builds WASM module and JS wrapper (pkg/vidyut_prakriya.js).
#
# This is a dev build. Creating it will be faster, but size and performance
# will not be optimized.
wasm_dev:
	wasm-pack build --target web

# Builds a simple web debugger.
debugger:
	./scripts/run-debugger.sh
